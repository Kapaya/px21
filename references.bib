
@inproceedings{bolin2005,
  title = {Automation and Customization of Rendered Web Pages},
  booktitle = {Proceedings of the 18th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '05},
  author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
  date = {2005},
  pages = {163},
  publisher = {{ACM Press}},
  location = {{Seattle, WA, USA}},
  doi = {10.1145/1095034.1095062},
  url = {http://portal.acm.org/citation.cfm?doid=1095034.1095062},
  urldate = {2021-02-11},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user’s name.},
  eventtitle = {The 18th Annual {{ACM}} Symposium},
  file = {/Users/geoffreylitt/Zotero/storage/5EF4RHD9/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf},
  isbn = {978-1-59593-271-6},
  langid = {english}
}

@inproceedings{bolin2005a,
  title = {Automation and Customization of Rendered Web Pages},
  booktitle = {Proceedings of the 18th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '05},
  author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
  date = {2005},
  pages = {163},
  publisher = {{ACM Press}},
  location = {{Seattle, WA, USA}},
  doi = {10.1145/1095034.1095062},
  url = {http://portal.acm.org/citation.cfm?doid=1095034.1095062},
  urldate = {2021-02-11},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user’s name.},
  eventtitle = {The 18th Annual {{ACM}} Symposium},
  file = {/Users/geoffreylitt/Zotero/storage/VLUP6DMI/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf},
  isbn = {978-1-59593-271-6},
  langid = {english}
}

@inproceedings{briot2016,
  title = {High {{Responsiveness}} for {{Group Editing CRDTs}}},
  booktitle = {Proceedings of the 19th {{International Conference}} on {{Supporting Group Work}}},
  author = {Briot, Loïck and Urso, Pascal and Shapiro, Marc},
  date = {2016-11-13},
  pages = {51--60},
  publisher = {{ACM}},
  location = {{Sanibel Island Florida USA}},
  doi = {10.1145/2957276.2957300},
  url = {https://dl.acm.org/doi/10.1145/2957276.2957300},
  urldate = {2021-02-11},
  abstract = {Group editing is a crucial feature for many end-user applications. It requires high responsiveness, which can be provided only by optimistic replication algorithms, which come in two classes: classical Operational Transformation (OT), or more recent Conflict-Free Replicated Data Types (CRDTs).},
  eventtitle = {{{GROUP}} '16: 2016 {{ACM Conference}} on {{Supporting Groupwork}}},
  file = {/Users/geoffreylitt/Zotero/storage/PJUXMG6P/Briot et al. - 2016 - High Responsiveness for Group Editing CRDTs.pdf},
  isbn = {978-1-4503-4276-6},
  langid = {english}
}

@inproceedings{chasins2018,
  title = {Rousillon: {{Scraping Distributed Hierarchical Web Data}}},
  shorttitle = {Rousillon},
  booktitle = {The 31st {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}} - {{UIST}} '18},
  author = {Chasins, Sarah E. and Mueller, Maria and Bodik, Rastislav},
  date = {2018},
  pages = {963--975},
  publisher = {{ACM Press}},
  location = {{Berlin, Germany}},
  doi = {10.1145/3242587.3242661},
  url = {http://dl.acm.org/citation.cfm?doid=3242587.3242661},
  urldate = {2020-01-03},
  abstract = {Programming by Demonstration (PBD) promises to enable data scientists to collect web data. However, in formative interviews with social scientists, we learned that current PBD tools are insufficient for many real-world web scraping tasks. The missing piece is the capability to collect hierarchicallystructured data from across many different webpages. We present Rousillon, a programming system for writing complex web automation scripts by demonstration. Users demonstrate how to collect the first row of a ‘universal table’ view of a hierarchical dataset to teach Rousillon how to collect all rows. To offer this new demonstration model, we developed novel relation selection and generalization algorithms. In a withinsubject user study on 15 computer scientists, users can write hierarchical web scrapers 8 times more quickly with Rousillon than with traditional programming.},
  eventtitle = {The 31st {{Annual ACM Symposium}}},
  file = {/Users/geoffreylitt/Zotero/storage/QUZNCYYS/Chasins et al. - 2018 - Rousillon Scraping Distributed Hierarchical Web D.pdf},
  isbn = {978-1-4503-5948-1},
  langid = {english}
}

@inproceedings{gulwani2014,
  title = {{{NLyze}}: Interactive Programming by Natural Language for Spreadsheet Data Analysis and Manipulation},
  shorttitle = {{{NLyze}}},
  booktitle = {Proceedings of the 2014 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  author = {Gulwani, Sumit and Marron, Mark},
  date = {2014-06-18},
  pages = {803--814},
  publisher = {{ACM}},
  location = {{Snowbird Utah USA}},
  doi = {10.1145/2588555.2612177},
  url = {https://dl.acm.org/doi/10.1145/2588555.2612177},
  urldate = {2021-02-11},
  abstract = {Millions of computer end users need to perform tasks over tabular spreadsheet data, yet lack the programming knowledge to do such tasks automatically. This paper describes the design and implementation of a robust natural language based interface to spreadsheet programming. Our methodology involves designing a typed domain-specific language (DSL) that supports an expressive algebra of map, filter, reduce, join, and formatting capabilities at a level of abstraction appropriate for non-expert users. The key algorithmic component of our methodology is a translation algorithm for converting a natural language specification in the context of a given spreadsheet to a ranked set of likely programs in the DSL. The translation algorithm leverages the spreadsheet spatial and temporal context to assign interpretations to specifications with implicit references, and is thus robust to a variety of ways in which end users can express the same task. The translation algorithm builds over ideas from keyword programming and semantic parsing to achieve both high precision and high recall. We implemented the system as an Excel add-in called NLyze that supports a rich user interaction model including annotating the user’s natural language specification and explaining the synthesized DSL programs by paraphrasing them into structured English. We collected a total of 3570 English descriptions for 40 spreadsheet tasks and our system was able to generate the intended interpretation as the top candidate for 94\% (97\% for the top 3) of those instances.},
  eventtitle = {{{SIGMOD}}/{{PODS}}'14: {{International Conference}} on {{Management}} of {{Data}}},
  file = {/Users/geoffreylitt/Zotero/storage/KLSLS834/Gulwani and Marron - 2014 - NLyze interactive programming by natural language.pdf},
  isbn = {978-1-4503-2376-5},
  langid = {english}
}

@inproceedings{huynh2006,
  title = {Enabling Web Browsers to Augment Web Sites' Filtering and Sorting Functionalities},
  booktitle = {Proceedings of the 19th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '06},
  author = {Huynh, David F. and Miller, Robert C. and Karger, David R.},
  date = {2006},
  pages = {125},
  publisher = {{ACM Press}},
  location = {{Montreux, Switzerland}},
  doi = {10.1145/1166253.1166274},
  url = {http://dl.acm.org/citation.cfm?doid=1166253.1166274},
  urldate = {2020-01-03},
  abstract = {Existing augmentations of web pages are mostly small cosmetic changes (e.g., removing ads) and minor addition of third-party content (e.g., product prices from competing sites). None leverages the structured data presented in web pages. This paper describes Sifter, a web browser extension that can augment a well-structured web site with advanced filtering and sorting functionality. These added features work inside the site’s own pages, preserving the site’s presentational style and the user’s context. Sifter contains an algorithm that scrapes structured data out of well-structured web pages while usually requiring no user intervention. We tested Sifter on real web sites and real users and found that people could use Sifter to perform sophisticated queries and high-level analyses on sizable data collections on the Web. We propose that web sites can be similarly augmented with other sophisticated data-centric functionality, giving users new benefits over the existing Web.},
  eventtitle = {The 19th Annual {{ACM}} Symposium},
  file = {/Users/geoffreylitt/Zotero/storage/ICV32DHL/Huynh et al. - 2006 - Enabling web browsers to augment web sites' filter.pdf},
  isbn = {978-1-59593-313-3},
  langid = {english}
}

@inproceedings{le2014,
  title = {{{FlashExtract}}: A Framework for Data Extraction by Examples},
  shorttitle = {{{FlashExtract}}},
  booktitle = {Proceedings of the 35th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Le, Vu and Gulwani, Sumit},
  date = {2014-06-09},
  pages = {542--553},
  publisher = {{ACM}},
  location = {{Edinburgh United Kingdom}},
  doi = {10.1145/2594291.2594333},
  url = {https://dl.acm.org/doi/10.1145/2594291.2594333},
  urldate = {2021-02-08},
  abstract = {Various document types that combine model and view (e.g., text files, webpages, spreadsheets) make it easy to organize (possibly hierarchical) data, but make it difficult to extract raw data for any further manipulation or querying. We present a general framework FlashExtract to extract relevant data from semi-structured documents using examples. It includes: (a) an interaction model that allows end-users to give examples to extract various fields and to relate them in a hierarchical organization using structure and sequence constructs. (b) an inductive synthesis algorithm to synthesize the intended program from few examples in any underlying domainspecific language for data extraction that has been built using our specified algebra of few core operators (map, filter, merge, and pair). We describe instantiation of our framework to three different domains: text files, webpages, and spreadsheets. On our benchmark comprising 75 documents, FlashExtract is able to extract intended data using an average of 2.36 examples in 0.84 seconds per field.},
  eventtitle = {{{PLDI}} '14: {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  file = {/Users/geoffreylitt/Zotero/storage/W22WDEYS/Le and Gulwani - 2014 - FlashExtract a framework for data extraction by e.pdf},
  isbn = {978-1-4503-2784-8},
  langid = {english}
}

@inproceedings{lin2009,
  title = {End-User Programming of Mashups with Vegemite},
  booktitle = {Proceedings of the 14th International Conference on {{Intelligent}} User Interfaces},
  author = {Lin, James and Wong, Jeffrey and Nichols, Jeffrey and Cypher, Allen and Lau, Tessa A.},
  date = {2009-02-08},
  pages = {97--106},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/1502650.1502667},
  url = {http://doi.org/10.1145/1502650.1502667},
  urldate = {2021-02-10},
  abstract = {Mashups are an increasingly popular way to integrate data from multiple web sites to fit a particular need, but it often requires substantial technical expertise to create them. To lower the barrier for creating mashups, we have extended the CoScripter web automation tool with a spreadsheet-like environment called Vegemite. Our system uses direct-manipulation and programming-by-demonstration tech-niques to automatically populate tables with information collected from various web sites. A particular strength of our approach is its ability to augment a data set with new values computed by a web site, such as determining the driving distance from a particular location to each of the addresses in a data set. An informal user study suggests that Vegemite may enable a wider class of users to address their information needs.},
  file = {/Users/geoffreylitt/Zotero/storage/2EP2P5ZS/Lin et al. - 2009 - End-user programming of mashups with vegemite.pdf},
  isbn = {978-1-60558-168-2},
  keywords = {automation,data integration,end-user programming,mashup,programming by demonstration,web},
  series = {{{IUI}} '09}
}

@inproceedings{litt2020,
  title = {Wildcard: {{Spreadsheet}}-{{Driven Customization}} of {{Web Applications}}},
  booktitle = {Companion {{Proceedings}} of the 4th {{International Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Litt, Geoffrey and Jackson, Daniel},
  date = {2020},
  pages = {10},
  publisher = {{Association for Computing Machinery}},
  location = {{Porto, Portugal.}},
  doi = {10.1145/3397537.3397541},
  url = {https://doi.org/10.1145/3397537.3397541},
  abstract = {Many Web applications do not meet the precise needs of their users. Browser extensions offer a way to customize web applications, but most people do not have the programming skills to implement their own extensions.},
  eventtitle = {{$<$}{{Programming}}’20{$>$}},
  file = {/Users/geoffreylitt/Zotero/storage/VJLCB4B6/Litt and Jackson - 2020 - Wildcard Spreadsheet-Driven Customization of Web .pdf},
  langid = {english}
}

@inproceedings{litt2020a,
  title = {End-User {{Software Customization}} by {{Direct Manipulation}} of {{Tabular Data}}},
  booktitle = {Proceedings of the 2020 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Litt, Geoffrey and Jackson, Daniel and Millis, Tyler and Quaye, Jessica},
  date = {2020-11-18},
  pages = {18--33},
  publisher = {{ACM}},
  location = {{Virtual USA}},
  doi = {10.1145/3426428.3426914},
  url = {https://dl.acm.org/doi/10.1145/3426428.3426914},
  urldate = {2020-12-20},
  abstract = {Customizing software should be as easy as using it. Unfortunately, most customization methods require users to abruptly shift from using a graphical interface to writing scripts in a programming language.},
  eventtitle = {{{SPLASH}} '20: {{Conference}} on {{Systems}}, {{Programming}}, {{Languages}}, and {{Applications}}, {{Software}} for {{Humanity}}},
  file = {/Users/geoffreylitt/Zotero/storage/CXDRP7ZN/Litt et al. - 2020 - End-user software customization by direct manipula.pdf},
  isbn = {978-1-4503-8178-9},
  langid = {english}
}


